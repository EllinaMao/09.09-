// <auto-generated />
using System;
using DataBaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseModels.Migrations
{
    [DbContext(typeof(DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ModelsCreating.Models.Curators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("curators_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("curators_name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("curators_surname");

                    b.HasKey("Id");

                    b.ToTable("curators", null, t =>
                        {
                            t.HasCheckConstraint("CK_curators_name_not_empty", "LEN(TRIM(curators_name)) > 0");

                            t.HasCheckConstraint("CK_curators_surname_not_empty", "LEN(TRIM(curators_surname)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Building")
                        .HasColumnType("int")
                        .HasColumnName("department_building");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("faculty_id");

                    b.Property<decimal>("Financing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("department_financing");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("department_name");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("departments", null, t =>
                        {
                            t.HasCheckConstraint("CK_department_building_range", "[department_building] >= 1 AND [department_building] <= 5");

                            t.HasCheckConstraint("CK_department_financing_positive", "[department_financing] >= 0");

                            t.HasCheckConstraint("CK_department_name_not_empty", "LEN(TRIM(department_name)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Faculties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("faculty_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("faculty_name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("faculties", null, t =>
                        {
                            t.HasCheckConstraint("CK_faculties_name_not_empty", "LEN(TRIM(faculty_name)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupLectures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_lectures_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_lectures_group_id");

                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("group_lectures_lecture_id");

                    b.HasKey("Id")
                        .HasName("PK_group_lectures");

                    b.HasIndex("GroupId");

                    b.HasIndex("LectureId");

                    b.ToTable("group_lectures", (string)null);
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupStudents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_student_group_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("group_student_student_id");

                    b.HasKey("Id")
                        .HasName("PK_group_students");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("group_students", (string)null);
                });

            modelBuilder.Entity("ModelsCreating.Models.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("group_name");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("group_year");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("groups", null, t =>
                        {
                            t.HasCheckConstraint("CK_groups_name_not_empty", "LEN(TRIM(group_name)) > 0");

                            t.HasCheckConstraint("CK_groups_year_range", "[group_year] BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupsCurators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_curator_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CuratorId")
                        .HasColumnType("int")
                        .HasColumnName("group_curator_curator_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_curator_group_id");

                    b.HasKey("Id")
                        .HasName("PK_groups_curators");

                    b.HasIndex("CuratorId");

                    b.HasIndex("GroupId");

                    b.ToTable("groups_curators", (string)null);
                });

            modelBuilder.Entity("ModelsCreating.Models.Lectures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lecture_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("lecture_date");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("lectures", null, t =>
                        {
                            t.HasCheckConstraint("CK_lectures_date_not_future", "[lecture_date] <= GETDATE()");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("student_name");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("student_rating");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("student_surname");

                    b.HasKey("Id");

                    b.ToTable("students", null, t =>
                        {
                            t.HasCheckConstraint("CK_students_name_not_empty", "LEN(TRIM(student_name)) > 0");

                            t.HasCheckConstraint("CK_students_rating_range", "[student_rating] BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_students_surname_not_empty", "LEN(TRIM(student_surname)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject_name");

                    b.HasKey("Id");

                    b.ToTable("subjects", null, t =>
                        {
                            t.HasCheckConstraint("CK_subjects_name_not_empty", "LEN(TRIM(subject_name)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Teachers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsProfessor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("teacher_name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("teacher_salary");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("teacher_surname");

                    b.HasKey("Id");

                    b.ToTable("teachers", null, t =>
                        {
                            t.HasCheckConstraint("CK_teachers_name_not_empty", "LEN(TRIM(teacher_name)) > 0");

                            t.HasCheckConstraint("CK_teachers_salary_positive", "[teacher_salary] > 0");

                            t.HasCheckConstraint("CK_teachers_surname_not_empty", "LEN(TRIM(teacher_surname)) > 0");
                        });
                });

            modelBuilder.Entity("ModelsCreating.Models.Departments", b =>
                {
                    b.HasOne("ModelsCreating.Models.Faculties", "FacultyNav")
                        .WithMany("DepartmentsNav")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacultyNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupLectures", b =>
                {
                    b.HasOne("ModelsCreating.Models.Groups", "GroupNav")
                        .WithMany("GroupsLecturesNav")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_group_lectures_groups_group_id");

                    b.HasOne("ModelsCreating.Models.Lectures", "LectureNav")
                        .WithMany("GroupsLecturesNav")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_group_lectures_lectures_lecture_id");

                    b.Navigation("GroupNav");

                    b.Navigation("LectureNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupStudents", b =>
                {
                    b.HasOne("ModelsCreating.Models.Groups", "GroupNav")
                        .WithMany("GroupsStudentsNav")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_group_students_groups_group_id");

                    b.HasOne("ModelsCreating.Models.Students", "StudentNav")
                        .WithMany("GroupsStudentsNav")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_group_students_students_student_id");

                    b.Navigation("GroupNav");

                    b.Navigation("StudentNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Groups", b =>
                {
                    b.HasOne("ModelsCreating.Models.Departments", "DepartmentNav")
                        .WithMany("GroupNav")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.GroupsCurators", b =>
                {
                    b.HasOne("ModelsCreating.Models.Curators", "CuratorNav")
                        .WithMany("GroupsCuratorsNav")
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groups_curators_curator_id");

                    b.HasOne("ModelsCreating.Models.Groups", "GroupNav")
                        .WithMany("GroupsCuratorsNav")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groups_curators_group_id");

                    b.Navigation("CuratorNav");

                    b.Navigation("GroupNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Lectures", b =>
                {
                    b.HasOne("ModelsCreating.Models.Subject", "Subject")
                        .WithMany("LecturesNav")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsCreating.Models.Teachers", "Teacher")
                        .WithMany("LecturesNav")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ModelsCreating.Models.Curators", b =>
                {
                    b.Navigation("GroupsCuratorsNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Departments", b =>
                {
                    b.Navigation("GroupNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Faculties", b =>
                {
                    b.Navigation("DepartmentsNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Groups", b =>
                {
                    b.Navigation("GroupsCuratorsNav");

                    b.Navigation("GroupsLecturesNav");

                    b.Navigation("GroupsStudentsNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Lectures", b =>
                {
                    b.Navigation("GroupsLecturesNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Students", b =>
                {
                    b.Navigation("GroupsStudentsNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Subject", b =>
                {
                    b.Navigation("LecturesNav");
                });

            modelBuilder.Entity("ModelsCreating.Models.Teachers", b =>
                {
                    b.Navigation("LecturesNav");
                });
#pragma warning restore 612, 618
        }
    }
}
